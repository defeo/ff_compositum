#ifndef NMOD_POLY_SAGE_OUTPUT__H
#define NMOD_POLY_SAGE_OUTPUT__H

#include <flint/nmod_poly.h>
#include <flint/nmod_mat.h>

/*---------------------------------------------------------------*/
/*---------------------------------------------------------------*/
/* a few utilities for debugging: prints output in sage format   */
/*---------------------------------------------------------------*/
/*---------------------------------------------------------------*/

/*---------------------------------------------------------------*/
/* assign k=Z/pZ and U=k[x]                                      */
/*---------------------------------------------------------------*/
void sage_output_init(nmod_t p);

/*---------------------------------------------------------------*/
/* prints P                                                      */
/*---------------------------------------------------------------*/
void sage_output_print_poly(nmod_poly_t P);

/*---------------------------------------------------------------*/
/* prints s = P                                                  */
/*---------------------------------------------------------------*/
void sage_output_assign_poly(nmod_poly_t P, char *s);

/*---------------------------------------------------------------*/
/* prints s = U(P)                                               */
/*---------------------------------------------------------------*/
void sage_output_assign_poly_from_vec(mp_srcptr ell, long m, char *s);

/*---------------------------------------------------------------*/
/* prints v = ell (vector of length m)                           */
/*---------------------------------------------------------------*/
void sage_output_assign_vec(mp_srcptr ell, long m, char *s);

/*---------------------------------------------------------------*/
/* prints s = M                                                  */
/*---------------------------------------------------------------*/
void sage_output_assign_mat(nmod_mat_t M, char *s);

#endif
